You should read the image you will get and search there for the following information:
- Chart name
- Chart type
- x-axis label
- y-axis label


Then transform it into a YAML structure according to these rules:
##  GoodData visualization structure
The definition of GoodData visualization should look like this
type: # A type of specific visualization, one of: table, bar_chart, column_chart, line_chart, area_chart, scatter_chart, bubble_chart, pie_chart, donut_chart, treemap_chart, pyramid_chart, funnel_chart, heatmap_chart, bullet_chart, waterfall_chart, dependency_wheel_chart, sankey_chart, headline_chart, combo_chart, geo_chart
id: # ID of a visualization. It has to be unique from all other existing visualizations.
title: # An optional human-readable title for the visualization. Derived from id, when not provided explicitly.
description: # An optional description of the visualization
tags: # An optional list of tags
query: # Defines the data used in this visualization
  fields:
    [field_name]: # A field definition. The definition varies significantly on type of field, described below
  filter_by:
    - # A dictionary of filters applied to the visualisation. Don't add it if there are no filters.
  sort_by:
    - # An array of sorting, described below. Don't add it if there is no sort.

// ... visualization data buckets
metrics:
  - # A single string id of the field defined in query, or...
  - field: # field id from the query
    format: # A format of the numeric field, e.g. "#,##0.0". This field is mandatory for ad-hoc created metrics, don't forget to add it.
    axes: # Axis to use for this bucket. Only applicable for "combo" charts. One of "primary", "secondary"
    totals: # An optional list of totals, mainly for the table visualization
      - type: # Aggregation type, one of "SUM", "AVG", "MAX", "MIN", "MED", "NAT"
        title: # A total title
        using: # A field id from the query to use for the total
view_by:
  - # A single string id of the field representing an attribute defined in query, or...
  - field: # field id representing an attribute defined from the query
  - cannot be metric ID or reference a metric

config: # Visualization configuration

## Query Fields
Each field in the query can be defined as a simple id referring to specific attribute, label, fact or metric, or as a more complex object with additional properties.
### for attribute field
title: # An optional human-readable title for the visualization. Will be derived from id if not provided explicitly.
using: # Defines which attribute to be used for this field
show_all_values: # A boolean flag to show all values, including NULL and empty values
---
### for metric
title: # An optional human-readable title for the visualization. Will be derived from id if not provided explicitly.
using: # Defines which metric to be used for this field
compute_ratio: # A boolean flag to compute a ratio of this metric
filter_by:
  - # An optional list of filter to apply to this metric, same format as Query Filters described below
---
### for calculated metric
title: # An optional human-readable title for the visualization. Will be derived from id if not provided explicitly.
using: # Defines which fact, attribute or label to be used for this field
aggregation: # An aggregation type, one of SUM, COUNT, APPROXIMATE_COUNT, AVG, MIN, MAX, MEDIAN, RUNSUM
compute_ratio: # A boolean flag to compute a ratio of this metric
filter_by:
  - # An optional list of filter to apply to this metric, same format as Query Filters described below
---
### for inline metric
title: # A field title
maql: # A maql statement
---
###  for arithmetic metric
title: # A field title
operator: # An operator, one of "SUM", "DIFFERENCE", "MULTIPLICATION", "RATIO", "CHANGE"
using: # An array of exactly two fields to use for the operation
---
### for period over period / previous period metric
title: # A field title
type: PREVIOUS_YEAR | PREVIOUS_PERIOD
using: # Defines which metric to be used for this field
date_filter: # Relative date filter to use for the period over period comparison
period: # In case of PREVIOUS_PERIOD, defines how many periods to go back

## Query Filters
### absolute date filter
type: date_filter
using: # A date dataset id to use for the filter
from: # A string with specific date, e.g. "2020-01-01"
to: # A string with specific date, e.g. "2020-01-01"
---
### relative date filter
type: date_filter
using: # A date dataset id to use for the filter
granularity: # A granularity to use for the filter, one of MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, YEAR,
             # MINUTE_OF_HOUR, HOUR_OF_DAY, DAY_OF_WEEK, DAY_OF_MONTH, DAY_OF_YEAR, WEEK_OF_YEAR,
             # MONTH_OF_YEAR, QUARTER_OF_YEAR
from: # A number specifying how many periods to start from, e.g. -1 for previous period
to: # A number specifying how many periods to end with, e.g. -2 for two periods ago
---
### attribute filter
type: attribute_filter
using: # An attribute id to use for the filter
state: # the default state of the filter, should contain either include or exclude
  include: # An array of attribute values to include
  exclude: # An array of attribute values to exclude
---
### metric value comparison filter
type: metric_value_filter
using: # A metric id to use for the filter
condition: # A condition to use for the filter, one of GREATER_THAN, GREATER_THAN_OR_EQUAL_TO, LESS_THAN,
           # LESS_THAN_OR_EQUAL_TO, EQUAL_TO, NOT_EQUAL_TO
value: # A value to compare the metric with
null_values_as_zero: # A boolean flag to treat NULL values as zero
---
### metric range filter
type: metric_value_filter
using: # A metric id to use for the filter
condition: # A condition to use for the filter, one of BETWEEN, NOT_BETWEEN
from: # A value to start the range from
to: # A value to end the range with
null_values_as_zero: # A boolean flag to treat NULL values as zero
---
### ranking filter
type: ranking_filter
using: # A metric id to use for the filter
attribute: # An attribute id to use for the filter
bottom: # A number of bottom values to include
...or...
top: # A number of top values to include

## Query Sorting
### attribute sort
type: attribute_sort
by: # An attribute id to use for the sorting
aggregation: # An aggregation type, only SUM at the moment
direction: # A direction of the sorting, one of ASC, DESC
---
### metric sort
type: metric_sort
metrics: # An array of metric ids to use for the sorting
  - # A metric id
  - by: # A metric id
    element: # An attribute id to use for the sorting
    function: # An aggregation type, one of SUM, AVG, MIN, MAX, MED, NAT
direction: # A direction of the sorting, one of ASC, DESC

## These are the supported [bucket_name] for individual visualizations
- Visualization type	[bucket_name]
- Headline chart	metrics
- Pie chart	metrics, view_by
- Donut chart	metrics, view_by
- Pyramid chart	metrics, view_by
- Funnel chart	metrics, view_by
- Bullet chart	metrics, view_by
- Waterfall chart	metrics, view_by
- Combo chart	metrics, view_by
- Scatter chart	metrics, view_by (alias attributes)
- Dependency wheel	metrics, view_by (alias from, to)
- Sankey chart	metrics, view_by (alias from, to)
- Treemap chart	metrics, view_by, segment_by
- Geo chart	metrics, view_by, segment_by
- Table	metrics, view_by (alias rows), segment_by (alias columns)
- Heatmap chart	metrics, view_by (alias rows), segment_by (alias columns)
- Bar chart	metrics, view_by, segment_by (alias stack_by)
- Column chart	metrics, view_by, segment_by (alias stack_by)
- Area chart	metrics, view_by, segment_by (alias stack_by)
- Line chart	metrics, view_by (alias trend_by), segment_by
- Bubble chart	metrics, view_by, segment_by (alias size_by)
---